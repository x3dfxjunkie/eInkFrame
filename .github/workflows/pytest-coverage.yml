name: Python Tests & Coverage

on:
  pull_request:
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'
      - '.github/workflows/pytest-coverage.yml'
  push:
    branches:
      - main
      - develop
    paths:
      - '**.py'
      - 'requirements*.txt'
      - 'pyproject.toml'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        python-version: ['3.9', '3.11', '3.13', '3.14']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better diffs

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pytest with coverage
        run: |
          pytest tests/ \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            -v

      - name: Check coverage threshold
        run: |
          python -m coverage report --fail-under=80
        continue-on-error: false

      - name: Generate coverage badge
        if: always()
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage_pct = float(root.get('line-rate', 0)) * 100
          print(f'Coverage: {coverage_pct:.1f}%')
          "

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Get coverage percentage
            try {
              const coverage = execSync('python -m coverage report | grep TOTAL | awk \'{print $NF}\'').toString().trim();
              const hasFailed = ${{ job.status == 'failure' }};

              let comment = `## Test Results\n\n`;
              comment += `- **Coverage:** ${coverage}\n`;
              comment += `- **Threshold:** 80%\n`;

              if (hasFailed) {
                comment += `- **Status:** ❌ Coverage below threshold\n`;
              } else {
                comment += `- **Status:** ✅ All checks passed\n`;
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not parse coverage');
            }

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Fail if coverage insufficient
        if: always()
        run: |
          COVERAGE=$(python -m coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          THRESHOLD=80

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage is $COVERAGE%, which is below the required threshold of ${THRESHOLD}%"
            exit 1
          else
            echo "✅ Coverage is $COVERAGE%, meets the required threshold of ${THRESHOLD}%"
          fi
