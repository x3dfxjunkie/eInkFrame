name: Code Quality Checks

on:
  pull_request:
    paths:
      - '**.py'
      - '.github/workflows/code-quality.yml'
      - '!lib/**'
  push:
    branches:
      - main
      - develop
    paths:
      - '**.py'
      - '!lib/**'

defaults:
  run:
    shell: bash

permissions:
  actions: none
  checks: write
  contents: read
  deployments: none
  id-token: none
  issues: none
  discussions: none
  packages: none
  pages: none
  pull-requests: write
  repository-projects: none
  security-events: write
  statuses: write

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v47
        with:
          files: |
            **/*.py

      - name: Setup UV
        id: setup-uv
        if: steps.changed-files.outputs.any_changed == 'true'
        uses: astral-sh/setup-uv@v7
        with:
          python-version: '3.13'
          activate-environment: "true"

      - name: Install linting tools
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          source ${{ steps.setup-uv.outputs.venv }}/bin/activate
          uv pip install -r requirements-dev.txt

      - name: Run Basic (syntax check) Compile
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # make an array
          all_changed_and_modified_files=(${{steps.changed-files.outputs.all_changed_and_modified_files}})

          # Find files that were removed / renamed (but show as changed) and remove them from the array.
          for F in ${all_changed_and_modified_files[@]}; do
              if [[ ! -f $F ]] ; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              elif [[ "${F}" =~ "snapshot" ]]; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              fi
          done

          for F in ${all_changed_and_modified_files[@]}; do python -m py_compile $F; done

      - name: Run Ruff linter
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # make an array
          all_changed_and_modified_files=(${{steps.changed-files.outputs.all_changed_and_modified_files}})

          # Find files that were removed / renamed (but show as changed) and remove them from the array.
          for F in ${all_changed_and_modified_files[@]}; do
              if [[ ! -f $F ]] ; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              elif [[ "${F}" =~ "snapshot" ]]; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              fi
          done
          ruff check --config pyproject.toml ${all_changed_and_modified_files[@]}
        continue-on-error: true

      - name: Run Ruff formatter check
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # make an array
          all_changed_and_modified_files=(${{steps.changed-files.outputs.all_changed_and_modified_files}})

          # Find files that were removed / renamed (but show as changed) and remove them from the array.
          for F in ${all_changed_and_modified_files[@]}; do
              if [[ ! -f $F ]] ; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              elif [[ "${F}" =~ "snapshot" ]]; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              fi
          done

          ruff format --check --config pyproject.toml ${all_changed_and_modified_files[@]}
        continue-on-error: true

      - name: Check import sorting with isort
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # make an array
          all_changed_and_modified_files=(${{steps.changed-files.outputs.all_changed_and_modified_files}})

          # Find files that were removed / renamed (but show as changed) and remove them from the array.
          for F in ${all_changed_and_modified_files[@]}; do
              if [[ ! -f $F ]] ; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              elif [[ "${F}" =~ "snapshot" ]]; then
                  all_changed_and_modified_files=("${all_changed_and_modified_files[@]/$F}")
              fi
          done

          isort --check-only --diff --ignore-whitespace --dont-follow-links --skip-glob "**/lib/*" ${all_changed_and_modified_files[@]}
        continue-on-error: true

      - name: Comment on PR with lint issues (if any)
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '⚠️ **Code Quality Issues Detected**\n\nPlease run the following to fix formatting:\n```bash\nruff check . --fix\nruff format .\nisort .\n```'
            });


  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13', '3.14']
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for better diffs

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pytest with coverage
        run: |
          pytest tests/ \
            --cov=. \
            --cov-report=term-missing \
            --cov-report=xml \
            --cov-report=html \
            --ignore=lib \
            -v

      - name: Check coverage threshold
        run: |
          python -m coverage report --fail-under=80
        continue-on-error: false

      - name: Generate coverage badge
        if: always()
        run: |
          python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage_pct = float(root.get('line-rate', 0)) * 100
          print(f'Coverage: {coverage_pct:.1f}%')
          "

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            // Get coverage percentage
            try {
              const coverage = execSync('python -m coverage report | grep TOTAL | awk \'{print $NF}\'').toString().trim();
              const hasFailed = ${{ job.status == 'failure' }};

              let comment = `## Test Results\n\n`;
              comment += `- **Coverage:** ${coverage}\n`;
              comment += `- **Threshold:** 80%\n`;

              if (hasFailed) {
                comment += `- **Status:** ❌ Coverage below threshold\n`;
              } else {
                comment += `- **Status:** ✅ All checks passed\n`;
              }

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not parse coverage');
            }

      - name: Upload coverage artifacts
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: coverage-report-py${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Fail if coverage insufficient
        if: always()
        run: |
          COVERAGE=$(python -m coverage report | grep TOTAL | awk '{print $NF}' | sed 's/%//')
          THRESHOLD=80

          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ Coverage is $COVERAGE%, which is below the required threshold of ${THRESHOLD}%"
            exit 1
          else
            echo "✅ Coverage is $COVERAGE%, meets the required threshold of ${THRESHOLD}%"
          fi


  approve:
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    needs:
      - test
      - lint
    timeout-minutes: 5

    steps:
      - name: Second Approve
        uses: hmarr/auto-approve-action@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
